//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SAC.Models.Resources
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SACModel : DbContext
    {
        public SACModel()
            : base("name=SACModel")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Cuenta> Cuenta { get; set; }
        public virtual DbSet<EstadoCuenta> EstadoCuenta { get; set; }
        public virtual DbSet<Grupo> Grupo { get; set; }
        public virtual DbSet<Perfil> Perfil { get; set; }
        public virtual DbSet<Rubro> Rubro { get; set; }
        public virtual DbSet<Empresa> Empresa { get; set; }
        public virtual DbSet<CuentaActiva> CuentaActiva { get; set; }
        public virtual DbSet<Archivo> Archivo { get; set; }
        public virtual DbSet<Log> Log { get; set; }
        public virtual DbSet<Usuario> Usuario { get; set; }
    
        public virtual ObjectResult<Nullable<int>> SACLogin(string userName, string passWord)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passWordParameter = passWord != null ?
                new ObjectParameter("PassWord", passWord) :
                new ObjectParameter("PassWord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SACLogin", userNameParameter, passWordParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Login(string userName, string passWord)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passWordParameter = passWord != null ?
                new ObjectParameter("PassWord", passWord) :
                new ObjectParameter("PassWord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Login", userNameParameter, passWordParameter);
        }
    
        public virtual int IngresarEmpresa(string empresaRut, string empresaRazonSocial, string empresaGiro, string empresaLogo, Nullable<int> usuarioCreacion)
        {
            var empresaRutParameter = empresaRut != null ?
                new ObjectParameter("EmpresaRut", empresaRut) :
                new ObjectParameter("EmpresaRut", typeof(string));
    
            var empresaRazonSocialParameter = empresaRazonSocial != null ?
                new ObjectParameter("EmpresaRazonSocial", empresaRazonSocial) :
                new ObjectParameter("EmpresaRazonSocial", typeof(string));
    
            var empresaGiroParameter = empresaGiro != null ?
                new ObjectParameter("EmpresaGiro", empresaGiro) :
                new ObjectParameter("EmpresaGiro", typeof(string));
    
            var empresaLogoParameter = empresaLogo != null ?
                new ObjectParameter("EmpresaLogo", empresaLogo) :
                new ObjectParameter("EmpresaLogo", typeof(string));
    
            var usuarioCreacionParameter = usuarioCreacion.HasValue ?
                new ObjectParameter("UsuarioCreacion", usuarioCreacion) :
                new ObjectParameter("UsuarioCreacion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("IngresarEmpresa", empresaRutParameter, empresaRazonSocialParameter, empresaGiroParameter, empresaLogoParameter, usuarioCreacionParameter);
        }
    
        public virtual int EditarEmpresa(Nullable<int> empresaId, string empresaRut, string empresaRazonSocial, string empresaGiro, string empresaLogo, Nullable<int> usuarioId)
        {
            var empresaIdParameter = empresaId.HasValue ?
                new ObjectParameter("empresaId", empresaId) :
                new ObjectParameter("empresaId", typeof(int));
    
            var empresaRutParameter = empresaRut != null ?
                new ObjectParameter("empresaRut", empresaRut) :
                new ObjectParameter("empresaRut", typeof(string));
    
            var empresaRazonSocialParameter = empresaRazonSocial != null ?
                new ObjectParameter("empresaRazonSocial", empresaRazonSocial) :
                new ObjectParameter("empresaRazonSocial", typeof(string));
    
            var empresaGiroParameter = empresaGiro != null ?
                new ObjectParameter("empresaGiro", empresaGiro) :
                new ObjectParameter("empresaGiro", typeof(string));
    
            var empresaLogoParameter = empresaLogo != null ?
                new ObjectParameter("empresaLogo", empresaLogo) :
                new ObjectParameter("empresaLogo", typeof(string));
    
            var usuarioIdParameter = usuarioId.HasValue ?
                new ObjectParameter("usuarioId", usuarioId) :
                new ObjectParameter("usuarioId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditarEmpresa", empresaIdParameter, empresaRutParameter, empresaRazonSocialParameter, empresaGiroParameter, empresaLogoParameter, usuarioIdParameter);
        }
    
        public virtual int EliminarEmpresa(Nullable<int> empresaId)
        {
            var empresaIdParameter = empresaId.HasValue ?
                new ObjectParameter("empresaId", empresaId) :
                new ObjectParameter("empresaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EliminarEmpresa", empresaIdParameter);
        }
    
        public virtual int IngresarRubros(string rubroNombre, string rubroDescripcion, Nullable<int> usuarioCreacion)
        {
            var rubroNombreParameter = rubroNombre != null ?
                new ObjectParameter("rubroNombre", rubroNombre) :
                new ObjectParameter("rubroNombre", typeof(string));
    
            var rubroDescripcionParameter = rubroDescripcion != null ?
                new ObjectParameter("rubroDescripcion", rubroDescripcion) :
                new ObjectParameter("rubroDescripcion", typeof(string));
    
            var usuarioCreacionParameter = usuarioCreacion.HasValue ?
                new ObjectParameter("UsuarioCreacion", usuarioCreacion) :
                new ObjectParameter("UsuarioCreacion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("IngresarRubros", rubroNombreParameter, rubroDescripcionParameter, usuarioCreacionParameter);
        }
    
        public virtual int EditarRubro(Nullable<int> rubroId, string rubroNombre, string rubroDescripcion, Nullable<int> usuarioId)
        {
            var rubroIdParameter = rubroId.HasValue ?
                new ObjectParameter("rubroId", rubroId) :
                new ObjectParameter("rubroId", typeof(int));
    
            var rubroNombreParameter = rubroNombre != null ?
                new ObjectParameter("rubroNombre", rubroNombre) :
                new ObjectParameter("rubroNombre", typeof(string));
    
            var rubroDescripcionParameter = rubroDescripcion != null ?
                new ObjectParameter("rubroDescripcion", rubroDescripcion) :
                new ObjectParameter("rubroDescripcion", typeof(string));
    
            var usuarioIdParameter = usuarioId.HasValue ?
                new ObjectParameter("usuarioId", usuarioId) :
                new ObjectParameter("usuarioId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditarRubro", rubroIdParameter, rubroNombreParameter, rubroDescripcionParameter, usuarioIdParameter);
        }
    
        public virtual int EliminarRubro(Nullable<int> rubroId)
        {
            var rubroIdParameter = rubroId.HasValue ?
                new ObjectParameter("rubroId", rubroId) :
                new ObjectParameter("rubroId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EliminarRubro", rubroIdParameter);
        }
    
        public virtual int IngresarGrupos(string grupoNombre, string grupoDescripcion, Nullable<int> usuarioCreacion)
        {
            var grupoNombreParameter = grupoNombre != null ?
                new ObjectParameter("grupoNombre", grupoNombre) :
                new ObjectParameter("grupoNombre", typeof(string));
    
            var grupoDescripcionParameter = grupoDescripcion != null ?
                new ObjectParameter("grupoDescripcion", grupoDescripcion) :
                new ObjectParameter("grupoDescripcion", typeof(string));
    
            var usuarioCreacionParameter = usuarioCreacion.HasValue ?
                new ObjectParameter("usuarioCreacion", usuarioCreacion) :
                new ObjectParameter("usuarioCreacion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("IngresarGrupos", grupoNombreParameter, grupoDescripcionParameter, usuarioCreacionParameter);
        }
    
        public virtual int EditarGrupo(Nullable<int> grupoId, string grupoNombre, string grupoDescripcion, Nullable<int> usuarioId)
        {
            var grupoIdParameter = grupoId.HasValue ?
                new ObjectParameter("grupoId", grupoId) :
                new ObjectParameter("grupoId", typeof(int));
    
            var grupoNombreParameter = grupoNombre != null ?
                new ObjectParameter("grupoNombre", grupoNombre) :
                new ObjectParameter("grupoNombre", typeof(string));
    
            var grupoDescripcionParameter = grupoDescripcion != null ?
                new ObjectParameter("grupoDescripcion", grupoDescripcion) :
                new ObjectParameter("grupoDescripcion", typeof(string));
    
            var usuarioIdParameter = usuarioId.HasValue ?
                new ObjectParameter("usuarioId", usuarioId) :
                new ObjectParameter("usuarioId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditarGrupo", grupoIdParameter, grupoNombreParameter, grupoDescripcionParameter, usuarioIdParameter);
        }
    
        public virtual int EliminarGrupo(Nullable<int> grupoId)
        {
            var grupoIdParameter = grupoId.HasValue ?
                new ObjectParameter("grupoId", grupoId) :
                new ObjectParameter("grupoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EliminarGrupo", grupoIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> IngresarCuenta(string cuentaNumero, string cuentaNombre, Nullable<int> cuentaEmpresa, Nullable<int> cuentaRubro, Nullable<int> cuentaGrupo, string cuentaDescripcion, Nullable<int> usuarioCreacion)
        {
            var cuentaNumeroParameter = cuentaNumero != null ?
                new ObjectParameter("cuentaNumero", cuentaNumero) :
                new ObjectParameter("cuentaNumero", typeof(string));
    
            var cuentaNombreParameter = cuentaNombre != null ?
                new ObjectParameter("cuentaNombre", cuentaNombre) :
                new ObjectParameter("cuentaNombre", typeof(string));
    
            var cuentaEmpresaParameter = cuentaEmpresa.HasValue ?
                new ObjectParameter("cuentaEmpresa", cuentaEmpresa) :
                new ObjectParameter("cuentaEmpresa", typeof(int));
    
            var cuentaRubroParameter = cuentaRubro.HasValue ?
                new ObjectParameter("cuentaRubro", cuentaRubro) :
                new ObjectParameter("cuentaRubro", typeof(int));
    
            var cuentaGrupoParameter = cuentaGrupo.HasValue ?
                new ObjectParameter("cuentaGrupo", cuentaGrupo) :
                new ObjectParameter("cuentaGrupo", typeof(int));
    
            var cuentaDescripcionParameter = cuentaDescripcion != null ?
                new ObjectParameter("cuentaDescripcion", cuentaDescripcion) :
                new ObjectParameter("cuentaDescripcion", typeof(string));
    
            var usuarioCreacionParameter = usuarioCreacion.HasValue ?
                new ObjectParameter("usuarioCreacion", usuarioCreacion) :
                new ObjectParameter("usuarioCreacion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("IngresarCuenta", cuentaNumeroParameter, cuentaNombreParameter, cuentaEmpresaParameter, cuentaRubroParameter, cuentaGrupoParameter, cuentaDescripcionParameter, usuarioCreacionParameter);
        }
    
        public virtual int EditarCuenta(Nullable<int> cuentaId, string cuentaNumero, string cuentaNombre, Nullable<int> cuentaEmpresa, Nullable<int> cuentaRubro, Nullable<int> cuentaGrupo, string cuentaDescripcion, Nullable<int> usuarioId)
        {
            var cuentaIdParameter = cuentaId.HasValue ?
                new ObjectParameter("cuentaId", cuentaId) :
                new ObjectParameter("cuentaId", typeof(int));
    
            var cuentaNumeroParameter = cuentaNumero != null ?
                new ObjectParameter("cuentaNumero", cuentaNumero) :
                new ObjectParameter("cuentaNumero", typeof(string));
    
            var cuentaNombreParameter = cuentaNombre != null ?
                new ObjectParameter("cuentaNombre", cuentaNombre) :
                new ObjectParameter("cuentaNombre", typeof(string));
    
            var cuentaEmpresaParameter = cuentaEmpresa.HasValue ?
                new ObjectParameter("cuentaEmpresa", cuentaEmpresa) :
                new ObjectParameter("cuentaEmpresa", typeof(int));
    
            var cuentaRubroParameter = cuentaRubro.HasValue ?
                new ObjectParameter("cuentaRubro", cuentaRubro) :
                new ObjectParameter("cuentaRubro", typeof(int));
    
            var cuentaGrupoParameter = cuentaGrupo.HasValue ?
                new ObjectParameter("cuentaGrupo", cuentaGrupo) :
                new ObjectParameter("cuentaGrupo", typeof(int));
    
            var cuentaDescripcionParameter = cuentaDescripcion != null ?
                new ObjectParameter("cuentaDescripcion", cuentaDescripcion) :
                new ObjectParameter("cuentaDescripcion", typeof(string));
    
            var usuarioIdParameter = usuarioId.HasValue ?
                new ObjectParameter("usuarioId", usuarioId) :
                new ObjectParameter("usuarioId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditarCuenta", cuentaIdParameter, cuentaNumeroParameter, cuentaNombreParameter, cuentaEmpresaParameter, cuentaRubroParameter, cuentaGrupoParameter, cuentaDescripcionParameter, usuarioIdParameter);
        }
    
        public virtual int EliminarCuenta(Nullable<int> cuentaId)
        {
            var cuentaIdParameter = cuentaId.HasValue ?
                new ObjectParameter("cuentaId", cuentaId) :
                new ObjectParameter("cuentaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EliminarCuenta", cuentaIdParameter);
        }
    
        public virtual int IngresarUsuario(string usuarioNombre, Nullable<int> empresaId, string usuarioEmail, Nullable<int> perfilId, string username, string pwd, Nullable<int> usuarioId, string usuarioRut)
        {
            var usuarioNombreParameter = usuarioNombre != null ?
                new ObjectParameter("usuarioNombre", usuarioNombre) :
                new ObjectParameter("usuarioNombre", typeof(string));
    
            var empresaIdParameter = empresaId.HasValue ?
                new ObjectParameter("empresaId", empresaId) :
                new ObjectParameter("empresaId", typeof(int));
    
            var usuarioEmailParameter = usuarioEmail != null ?
                new ObjectParameter("usuarioEmail", usuarioEmail) :
                new ObjectParameter("usuarioEmail", typeof(string));
    
            var perfilIdParameter = perfilId.HasValue ?
                new ObjectParameter("perfilId", perfilId) :
                new ObjectParameter("perfilId", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var pwdParameter = pwd != null ?
                new ObjectParameter("pwd", pwd) :
                new ObjectParameter("pwd", typeof(string));
    
            var usuarioIdParameter = usuarioId.HasValue ?
                new ObjectParameter("usuarioId", usuarioId) :
                new ObjectParameter("usuarioId", typeof(int));
    
            var usuarioRutParameter = usuarioRut != null ?
                new ObjectParameter("usuarioRut", usuarioRut) :
                new ObjectParameter("usuarioRut", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("IngresarUsuario", usuarioNombreParameter, empresaIdParameter, usuarioEmailParameter, perfilIdParameter, usernameParameter, pwdParameter, usuarioIdParameter, usuarioRutParameter);
        }
    
        public virtual int ActualizarPassword(Nullable<int> usuarioId, string pwd)
        {
            var usuarioIdParameter = usuarioId.HasValue ?
                new ObjectParameter("UsuarioId", usuarioId) :
                new ObjectParameter("UsuarioId", typeof(int));
    
            var pwdParameter = pwd != null ?
                new ObjectParameter("Pwd", pwd) :
                new ObjectParameter("Pwd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ActualizarPassword", usuarioIdParameter, pwdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> ObtenerAñosDistintos()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("ObtenerAñosDistintos");
        }
    
        public virtual int AsignarCuentaActiva(Nullable<int> cuentaActivaId, Nullable<System.DateTime> cuentaActivaFecha, Nullable<int> total, Nullable<int> cuentaActivaAnalista, Nullable<int> cuentaActivaValidador, Nullable<int> cuentaActivaCertificador, Nullable<int> cuentaActivaDiasPlazo)
        {
            var cuentaActivaIdParameter = cuentaActivaId.HasValue ?
                new ObjectParameter("cuentaActivaId", cuentaActivaId) :
                new ObjectParameter("cuentaActivaId", typeof(int));
    
            var cuentaActivaFechaParameter = cuentaActivaFecha.HasValue ?
                new ObjectParameter("cuentaActivaFecha", cuentaActivaFecha) :
                new ObjectParameter("cuentaActivaFecha", typeof(System.DateTime));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("total", total) :
                new ObjectParameter("total", typeof(int));
    
            var cuentaActivaAnalistaParameter = cuentaActivaAnalista.HasValue ?
                new ObjectParameter("cuentaActivaAnalista", cuentaActivaAnalista) :
                new ObjectParameter("cuentaActivaAnalista", typeof(int));
    
            var cuentaActivaValidadorParameter = cuentaActivaValidador.HasValue ?
                new ObjectParameter("cuentaActivaValidador", cuentaActivaValidador) :
                new ObjectParameter("cuentaActivaValidador", typeof(int));
    
            var cuentaActivaCertificadorParameter = cuentaActivaCertificador.HasValue ?
                new ObjectParameter("cuentaActivaCertificador", cuentaActivaCertificador) :
                new ObjectParameter("cuentaActivaCertificador", typeof(int));
    
            var cuentaActivaDiasPlazoParameter = cuentaActivaDiasPlazo.HasValue ?
                new ObjectParameter("cuentaActivaDiasPlazo", cuentaActivaDiasPlazo) :
                new ObjectParameter("cuentaActivaDiasPlazo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AsignarCuentaActiva", cuentaActivaIdParameter, cuentaActivaFechaParameter, totalParameter, cuentaActivaAnalistaParameter, cuentaActivaValidadorParameter, cuentaActivaCertificadorParameter, cuentaActivaDiasPlazoParameter);
        }
    
        public virtual int IngresarCuentaActiva(Nullable<int> cuentaActivaId, Nullable<System.DateTime> cuentaActivaFecha, Nullable<int> cuentaActivaTotal, Nullable<int> cuentaActivaAnalista, Nullable<int> cuentaActivaValidador, Nullable<int> cuentaActivaCertificador, Nullable<int> cuentaActivaDiasPlazo, Nullable<int> usuarioCreacion)
        {
            var cuentaActivaIdParameter = cuentaActivaId.HasValue ?
                new ObjectParameter("cuentaActivaId", cuentaActivaId) :
                new ObjectParameter("cuentaActivaId", typeof(int));
    
            var cuentaActivaFechaParameter = cuentaActivaFecha.HasValue ?
                new ObjectParameter("cuentaActivaFecha", cuentaActivaFecha) :
                new ObjectParameter("cuentaActivaFecha", typeof(System.DateTime));
    
            var cuentaActivaTotalParameter = cuentaActivaTotal.HasValue ?
                new ObjectParameter("cuentaActivaTotal", cuentaActivaTotal) :
                new ObjectParameter("cuentaActivaTotal", typeof(int));
    
            var cuentaActivaAnalistaParameter = cuentaActivaAnalista.HasValue ?
                new ObjectParameter("cuentaActivaAnalista", cuentaActivaAnalista) :
                new ObjectParameter("cuentaActivaAnalista", typeof(int));
    
            var cuentaActivaValidadorParameter = cuentaActivaValidador.HasValue ?
                new ObjectParameter("cuentaActivaValidador", cuentaActivaValidador) :
                new ObjectParameter("cuentaActivaValidador", typeof(int));
    
            var cuentaActivaCertificadorParameter = cuentaActivaCertificador.HasValue ?
                new ObjectParameter("cuentaActivaCertificador", cuentaActivaCertificador) :
                new ObjectParameter("cuentaActivaCertificador", typeof(int));
    
            var cuentaActivaDiasPlazoParameter = cuentaActivaDiasPlazo.HasValue ?
                new ObjectParameter("cuentaActivaDiasPlazo", cuentaActivaDiasPlazo) :
                new ObjectParameter("cuentaActivaDiasPlazo", typeof(int));
    
            var usuarioCreacionParameter = usuarioCreacion.HasValue ?
                new ObjectParameter("UsuarioCreacion", usuarioCreacion) :
                new ObjectParameter("UsuarioCreacion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("IngresarCuentaActiva", cuentaActivaIdParameter, cuentaActivaFechaParameter, cuentaActivaTotalParameter, cuentaActivaAnalistaParameter, cuentaActivaValidadorParameter, cuentaActivaCertificadorParameter, cuentaActivaDiasPlazoParameter, usuarioCreacionParameter);
        }
    
        public virtual int InsertarArchivo(string archivoNombre, byte[] archivoData, Nullable<double> archivoMonto, string archivoComentario, string archivoExtension, Nullable<int> usuarioCreacion, Nullable<int> cuentaActivaId, Nullable<System.DateTime> cuentaActivaFecha)
        {
            var archivoNombreParameter = archivoNombre != null ?
                new ObjectParameter("ArchivoNombre", archivoNombre) :
                new ObjectParameter("ArchivoNombre", typeof(string));
    
            var archivoDataParameter = archivoData != null ?
                new ObjectParameter("ArchivoData", archivoData) :
                new ObjectParameter("ArchivoData", typeof(byte[]));
    
            var archivoMontoParameter = archivoMonto.HasValue ?
                new ObjectParameter("ArchivoMonto", archivoMonto) :
                new ObjectParameter("ArchivoMonto", typeof(double));
    
            var archivoComentarioParameter = archivoComentario != null ?
                new ObjectParameter("ArchivoComentario", archivoComentario) :
                new ObjectParameter("ArchivoComentario", typeof(string));
    
            var archivoExtensionParameter = archivoExtension != null ?
                new ObjectParameter("ArchivoExtension", archivoExtension) :
                new ObjectParameter("ArchivoExtension", typeof(string));
    
            var usuarioCreacionParameter = usuarioCreacion.HasValue ?
                new ObjectParameter("UsuarioCreacion", usuarioCreacion) :
                new ObjectParameter("UsuarioCreacion", typeof(int));
    
            var cuentaActivaIdParameter = cuentaActivaId.HasValue ?
                new ObjectParameter("CuentaActivaId", cuentaActivaId) :
                new ObjectParameter("CuentaActivaId", typeof(int));
    
            var cuentaActivaFechaParameter = cuentaActivaFecha.HasValue ?
                new ObjectParameter("CuentaActivaFecha", cuentaActivaFecha) :
                new ObjectParameter("CuentaActivaFecha", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertarArchivo", archivoNombreParameter, archivoDataParameter, archivoMontoParameter, archivoComentarioParameter, archivoExtensionParameter, usuarioCreacionParameter, cuentaActivaIdParameter, cuentaActivaFechaParameter);
        }
    
        public virtual int EditarArchivo(Nullable<int> archivoId, Nullable<int> archivoVersion, string archivoNombre, Nullable<int> archivoMonto, string archivoComentario, Nullable<int> archivoUsuarioId)
        {
            var archivoIdParameter = archivoId.HasValue ?
                new ObjectParameter("archivoId", archivoId) :
                new ObjectParameter("archivoId", typeof(int));
    
            var archivoVersionParameter = archivoVersion.HasValue ?
                new ObjectParameter("archivoVersion", archivoVersion) :
                new ObjectParameter("archivoVersion", typeof(int));
    
            var archivoNombreParameter = archivoNombre != null ?
                new ObjectParameter("archivoNombre", archivoNombre) :
                new ObjectParameter("archivoNombre", typeof(string));
    
            var archivoMontoParameter = archivoMonto.HasValue ?
                new ObjectParameter("archivoMonto", archivoMonto) :
                new ObjectParameter("archivoMonto", typeof(int));
    
            var archivoComentarioParameter = archivoComentario != null ?
                new ObjectParameter("archivoComentario", archivoComentario) :
                new ObjectParameter("archivoComentario", typeof(string));
    
            var archivoUsuarioIdParameter = archivoUsuarioId.HasValue ?
                new ObjectParameter("archivoUsuarioId", archivoUsuarioId) :
                new ObjectParameter("archivoUsuarioId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditarArchivo", archivoIdParameter, archivoVersionParameter, archivoNombreParameter, archivoMontoParameter, archivoComentarioParameter, archivoUsuarioIdParameter);
        }
    
        public virtual int EliminarArchivo(Nullable<int> archivoId, Nullable<int> archivoVersion)
        {
            var archivoIdParameter = archivoId.HasValue ?
                new ObjectParameter("archivoId", archivoId) :
                new ObjectParameter("archivoId", typeof(int));
    
            var archivoVersionParameter = archivoVersion.HasValue ?
                new ObjectParameter("archivoVersion", archivoVersion) :
                new ObjectParameter("archivoVersion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EliminarArchivo", archivoIdParameter, archivoVersionParameter);
        }
    
        public virtual int InsertarVersion(Nullable<int> archivoId, Nullable<int> archivoVersion, string archivoNombre, Nullable<int> archivoMonto, string archivoComentario, byte[] archivoData, Nullable<int> usuarioCreacion)
        {
            var archivoIdParameter = archivoId.HasValue ?
                new ObjectParameter("archivoId", archivoId) :
                new ObjectParameter("archivoId", typeof(int));
    
            var archivoVersionParameter = archivoVersion.HasValue ?
                new ObjectParameter("archivoVersion", archivoVersion) :
                new ObjectParameter("archivoVersion", typeof(int));
    
            var archivoNombreParameter = archivoNombre != null ?
                new ObjectParameter("ArchivoNombre", archivoNombre) :
                new ObjectParameter("ArchivoNombre", typeof(string));
    
            var archivoMontoParameter = archivoMonto.HasValue ?
                new ObjectParameter("ArchivoMonto", archivoMonto) :
                new ObjectParameter("ArchivoMonto", typeof(int));
    
            var archivoComentarioParameter = archivoComentario != null ?
                new ObjectParameter("ArchivoComentario", archivoComentario) :
                new ObjectParameter("ArchivoComentario", typeof(string));
    
            var archivoDataParameter = archivoData != null ?
                new ObjectParameter("ArchivoData", archivoData) :
                new ObjectParameter("ArchivoData", typeof(byte[]));
    
            var usuarioCreacionParameter = usuarioCreacion.HasValue ?
                new ObjectParameter("UsuarioCreacion", usuarioCreacion) :
                new ObjectParameter("UsuarioCreacion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertarVersion", archivoIdParameter, archivoVersionParameter, archivoNombreParameter, archivoMontoParameter, archivoComentarioParameter, archivoDataParameter, usuarioCreacionParameter);
        }
    
        public virtual int IngresarArchivo(string archivoNombre, byte[] archivoData, Nullable<double> archivoMonto, string archivoComentario, string archivoExtension, Nullable<int> usuarioCreacion, Nullable<int> cuentaActivaId, Nullable<System.DateTime> cuentaActivaFecha)
        {
            var archivoNombreParameter = archivoNombre != null ?
                new ObjectParameter("ArchivoNombre", archivoNombre) :
                new ObjectParameter("ArchivoNombre", typeof(string));
    
            var archivoDataParameter = archivoData != null ?
                new ObjectParameter("ArchivoData", archivoData) :
                new ObjectParameter("ArchivoData", typeof(byte[]));
    
            var archivoMontoParameter = archivoMonto.HasValue ?
                new ObjectParameter("ArchivoMonto", archivoMonto) :
                new ObjectParameter("ArchivoMonto", typeof(double));
    
            var archivoComentarioParameter = archivoComentario != null ?
                new ObjectParameter("ArchivoComentario", archivoComentario) :
                new ObjectParameter("ArchivoComentario", typeof(string));
    
            var archivoExtensionParameter = archivoExtension != null ?
                new ObjectParameter("ArchivoExtension", archivoExtension) :
                new ObjectParameter("ArchivoExtension", typeof(string));
    
            var usuarioCreacionParameter = usuarioCreacion.HasValue ?
                new ObjectParameter("UsuarioCreacion", usuarioCreacion) :
                new ObjectParameter("UsuarioCreacion", typeof(int));
    
            var cuentaActivaIdParameter = cuentaActivaId.HasValue ?
                new ObjectParameter("CuentaActivaId", cuentaActivaId) :
                new ObjectParameter("CuentaActivaId", typeof(int));
    
            var cuentaActivaFechaParameter = cuentaActivaFecha.HasValue ?
                new ObjectParameter("CuentaActivaFecha", cuentaActivaFecha) :
                new ObjectParameter("CuentaActivaFecha", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("IngresarArchivo", archivoNombreParameter, archivoDataParameter, archivoMontoParameter, archivoComentarioParameter, archivoExtensionParameter, usuarioCreacionParameter, cuentaActivaIdParameter, cuentaActivaFechaParameter);
        }
    
        public virtual int IngresarVersion(Nullable<int> archivoId, Nullable<int> archivoVersion, string archivoNombre, Nullable<int> archivoMonto, string archivoComentario, byte[] archivoData, Nullable<int> usuarioCreacion, string archivoExtension, Nullable<int> cuentaActivaId, Nullable<System.DateTime> cuentaActivaFecha)
        {
            var archivoIdParameter = archivoId.HasValue ?
                new ObjectParameter("archivoId", archivoId) :
                new ObjectParameter("archivoId", typeof(int));
    
            var archivoVersionParameter = archivoVersion.HasValue ?
                new ObjectParameter("archivoVersion", archivoVersion) :
                new ObjectParameter("archivoVersion", typeof(int));
    
            var archivoNombreParameter = archivoNombre != null ?
                new ObjectParameter("ArchivoNombre", archivoNombre) :
                new ObjectParameter("ArchivoNombre", typeof(string));
    
            var archivoMontoParameter = archivoMonto.HasValue ?
                new ObjectParameter("ArchivoMonto", archivoMonto) :
                new ObjectParameter("ArchivoMonto", typeof(int));
    
            var archivoComentarioParameter = archivoComentario != null ?
                new ObjectParameter("ArchivoComentario", archivoComentario) :
                new ObjectParameter("ArchivoComentario", typeof(string));
    
            var archivoDataParameter = archivoData != null ?
                new ObjectParameter("ArchivoData", archivoData) :
                new ObjectParameter("ArchivoData", typeof(byte[]));
    
            var usuarioCreacionParameter = usuarioCreacion.HasValue ?
                new ObjectParameter("UsuarioCreacion", usuarioCreacion) :
                new ObjectParameter("UsuarioCreacion", typeof(int));
    
            var archivoExtensionParameter = archivoExtension != null ?
                new ObjectParameter("ArchivoExtension", archivoExtension) :
                new ObjectParameter("ArchivoExtension", typeof(string));
    
            var cuentaActivaIdParameter = cuentaActivaId.HasValue ?
                new ObjectParameter("CuentaActivaId", cuentaActivaId) :
                new ObjectParameter("CuentaActivaId", typeof(int));
    
            var cuentaActivaFechaParameter = cuentaActivaFecha.HasValue ?
                new ObjectParameter("CuentaActivaFecha", cuentaActivaFecha) :
                new ObjectParameter("CuentaActivaFecha", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("IngresarVersion", archivoIdParameter, archivoVersionParameter, archivoNombreParameter, archivoMontoParameter, archivoComentarioParameter, archivoDataParameter, usuarioCreacionParameter, archivoExtensionParameter, cuentaActivaIdParameter, cuentaActivaFechaParameter);
        }
    
        public virtual int CambiarEstadoCuenta(string logDescripcion, Nullable<int> logEstadoId, Nullable<int> logCuentaActivaId, Nullable<System.DateTime> cuentaActivaFecha)
        {
            var logDescripcionParameter = logDescripcion != null ?
                new ObjectParameter("logDescripcion", logDescripcion) :
                new ObjectParameter("logDescripcion", typeof(string));
    
            var logEstadoIdParameter = logEstadoId.HasValue ?
                new ObjectParameter("logEstadoId", logEstadoId) :
                new ObjectParameter("logEstadoId", typeof(int));
    
            var logCuentaActivaIdParameter = logCuentaActivaId.HasValue ?
                new ObjectParameter("logCuentaActivaId", logCuentaActivaId) :
                new ObjectParameter("logCuentaActivaId", typeof(int));
    
            var cuentaActivaFechaParameter = cuentaActivaFecha.HasValue ?
                new ObjectParameter("CuentaActivaFecha", cuentaActivaFecha) :
                new ObjectParameter("CuentaActivaFecha", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CambiarEstadoCuenta", logDescripcionParameter, logEstadoIdParameter, logCuentaActivaIdParameter, cuentaActivaFechaParameter);
        }
    
        public virtual int EditarUsuario(Nullable<int> usuarioId, Nullable<int> empresaUsuario, string usuarioNombre, string usuarioEmail, Nullable<int> perfilUsuario, Nullable<int> usuarioCreacion, string usuarioRut)
        {
            var usuarioIdParameter = usuarioId.HasValue ?
                new ObjectParameter("usuarioId", usuarioId) :
                new ObjectParameter("usuarioId", typeof(int));
    
            var empresaUsuarioParameter = empresaUsuario.HasValue ?
                new ObjectParameter("empresaUsuario", empresaUsuario) :
                new ObjectParameter("empresaUsuario", typeof(int));
    
            var usuarioNombreParameter = usuarioNombre != null ?
                new ObjectParameter("usuarioNombre", usuarioNombre) :
                new ObjectParameter("usuarioNombre", typeof(string));
    
            var usuarioEmailParameter = usuarioEmail != null ?
                new ObjectParameter("usuarioEmail", usuarioEmail) :
                new ObjectParameter("usuarioEmail", typeof(string));
    
            var perfilUsuarioParameter = perfilUsuario.HasValue ?
                new ObjectParameter("perfilUsuario", perfilUsuario) :
                new ObjectParameter("perfilUsuario", typeof(int));
    
            var usuarioCreacionParameter = usuarioCreacion.HasValue ?
                new ObjectParameter("usuarioCreacion", usuarioCreacion) :
                new ObjectParameter("usuarioCreacion", typeof(int));
    
            var usuarioRutParameter = usuarioRut != null ?
                new ObjectParameter("usuarioRut", usuarioRut) :
                new ObjectParameter("usuarioRut", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditarUsuario", usuarioIdParameter, empresaUsuarioParameter, usuarioNombreParameter, usuarioEmailParameter, perfilUsuarioParameter, usuarioCreacionParameter, usuarioRutParameter);
        }
    
        public virtual int EliminarUsuario(Nullable<int> usuarioId)
        {
            var usuarioIdParameter = usuarioId.HasValue ?
                new ObjectParameter("usuarioId", usuarioId) :
                new ObjectParameter("usuarioId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EliminarUsuario", usuarioIdParameter);
        }
    
        public virtual int EditarClaveUsuario(Nullable<int> usuarioId, string pwd, Nullable<int> usuarioCreacion)
        {
            var usuarioIdParameter = usuarioId.HasValue ?
                new ObjectParameter("usuarioId", usuarioId) :
                new ObjectParameter("usuarioId", typeof(int));
    
            var pwdParameter = pwd != null ?
                new ObjectParameter("pwd", pwd) :
                new ObjectParameter("pwd", typeof(string));
    
            var usuarioCreacionParameter = usuarioCreacion.HasValue ?
                new ObjectParameter("usuarioCreacion", usuarioCreacion) :
                new ObjectParameter("usuarioCreacion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditarClaveUsuario", usuarioIdParameter, pwdParameter, usuarioCreacionParameter);
        }
    
        public virtual int EliminarCuentaActiva(Nullable<int> cuentaActivaId, Nullable<System.DateTime> cuentaActivaFecha)
        {
            var cuentaActivaIdParameter = cuentaActivaId.HasValue ?
                new ObjectParameter("cuentaActivaId", cuentaActivaId) :
                new ObjectParameter("cuentaActivaId", typeof(int));
    
            var cuentaActivaFechaParameter = cuentaActivaFecha.HasValue ?
                new ObjectParameter("cuentaActivaFecha", cuentaActivaFecha) :
                new ObjectParameter("cuentaActivaFecha", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EliminarCuentaActiva", cuentaActivaIdParameter, cuentaActivaFechaParameter);
        }
    }
}
